import pandas as pd
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
plt.rcParams['font.sans-serif'] = ['SimHei']
plt.rcParams['axes.unicode_minus'] = False
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers import Dense, Embedding, LSTM, SpatialDropout1D
from sklearn.model_selection import train_test_split
from keras.utils.np_utils import to_categorical
from keras.callbacks import EarlyStopping
from keras.layers import Dropout
import jieba as jb
import re

df = pd.read_csv('D:\\Users\\Desktop\\模型\\修甲多分类.csv')
df=df[['C','T']]
print("数据总量: %d ." % len(df))
df.sample(10)

print("在 A 列中总共有 %d 个空值." % df['C'].isnull().sum())
print("在 T 列中总共有 %d 个空值." % df['T'].isnull().sum())
df[df.isnull().values==True]
df = df[pd.notnull(df['T'])]


d = {'C':df['C'].value_counts().index, 'count': df['C'].value_counts()}
df_C = pd.DataFrame(data=d).reset_index(drop=True)
df_C

df_C.plot(x='C', y='count', kind='bar', legend=False,  figsize=(8, 5))
plt.title("类目分布")
plt.ylabel('数量', fontsize=18)
plt.xlabel('类目', fontsize=18)


df['ID'] = df['C'].factorize()[0]
ID_df = df[['C', 'ID']].drop_duplicates().sort_values('ID').reset_index(drop=True)
C_to_id = dict(ID_df.values)
id_to_C = dict(ID_df[['ID', 'C']].values)
df.sample(10)
ID_df


# 定义删除除字母,数字，汉字以外的所有符号的函数
def remove_punctuation(line):
    line = str(line)
    if line.strip() == '':
        return ''
    rule = re.compile(u"[^a-zA-Z0-9\u4E00-\u9FA5]")
    line = rule.sub('', line)
    return line
def stopwordslist(filepath):
    stopwords = [line.strip() for line in open(filepath, 'r', encoding='utf-8').readlines()]
    return stopwords
# 加载停用词
stopwords = stopwordslist("../data/停用词表-词频.txt")

#删除除字母,数字，汉字以外的所有符号
df['clean_T'] = df['T'].apply(remove_punctuation)
df.sample(10)

#分词，并过滤停用词
df['cut_T'] = df['clean_T'].apply(lambda x: " ".join([w for w in list(jb.cut(x)) if w not in stopwords]))
df.head()



# 设置最频繁使用的50000个词(在texts_to_matrix是会取前MAX_NB_WORDS,会取前MAX_NB_WORDS列)
MAX_NB_WORDS = 50000
# 每条cut_review最大的长度
MAX_SEQUENCE_LENGTH = 250
# 设置Embeddingceng层的维度
EMBEDDING_DIM = 100
tokenizer = Tokenizer(num_words=MAX_NB_WORDS, filters='!"#$%&()*+,-./:;<=>?@[\]^_`{|}~', lower=True)
tokenizer.fit_on_texts(df['cut_T'].values)
word_index = tokenizer.word_index
print('共有 %s 个不相同的词语.' % len(word_index))



X = tokenizer.texts_to_sequences(df['cut_T'].values)
#填充X,让X的各个列的长度统一
X = pad_sequences(X, maxlen=MAX_SEQUENCE_LENGTH)
#多类标签的onehot展开
Y = pd.get_dummies(df['ID']).values
print(X.shape)
print(Y.shape)


#拆分训练集和测试集
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.10, random_state = 42)
print(X_train.shape,Y_train.shape)
print(X_test.shape,Y_test.shape)


#定义模型
model = Sequential()
model.add(Embedding(MAX_NB_WORDS, EMBEDDING_DIM, input_length=X.shape[1]))
model.add(SpatialDropout1D(0.2))
model.add(LSTM(500, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(151, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
print(model.summary())

epochs = 50
batch_size = 64

history = model.fit(X_train, Y_train, epochs=epochs, batch_size=batch_size,validation_split=0.1,
                    callbacks=[EarlyStopping(monitor='val_loss', patience=3, min_delta=0.0001)])


accr = model.evaluate(X_test,Y_test)
print('Test set\n  Loss: {:0.3f}\n  Accuracy: {:0.3f}'.format(accr[0],accr[1]))

plt.title('Loss')
plt.plot(history.history['loss'], label='train')
plt.plot(history.history['val_loss'], label='test')
plt.legend()
plt.show();


plt.title('Accuracy')
plt.plot(history.history['accuracy'], label='train')
plt.plot(history.history['val_accuracy'], label='test')
plt.legend()
plt.show();


y_pred = model.predict(X_test)
y_pred = y_pred.argmax(axis = 1)
Y_test = Y_test.argmax(axis = 1)


import seaborn as sns
from sklearn.metrics import accuracy_score, confusion_matrix
#生成混淆矩阵
conf_mat = confusion_matrix(Y_test, y_pred)
fig, ax = plt.subplots(figsize=(10,8))
sns.heatmap(conf_mat, annot=True, fmt='d',
            xticklabels=ID_df.C.values, yticklabels=ID_df.C.values)
plt.ylabel('实际结果',fontsize=18)
plt.xlabel('预测结果',fontsize=18)

from sklearn.metrics import classification_report

print('accuracy %s' % accuracy_score(y_pred, Y_test))
print(classification_report(Y_test, y_pred, target_names=ID_df['C'].values))

def predict(text):
    txt = remove_punctuation(text)
    txt = [" ".join([w for w in list(jb.cut(txt)) if w not in stopwords])]
    seq = tokenizer.texts_to_sequences(txt)
    padded = pad_sequences(seq, maxlen=MAX_SEQUENCE_LENGTH)
    pred = model.predict(padded)
    ID= pred.argmax(axis=1)[0]
    return ID_df[ID_df.ID==ID]['C'].values[0]

predict('新生婴儿指甲剪专用套装幼儿童宝宝钳剪刀单个装安全用品护理工具宝宝护理5件套 安全 防夹肉包装种类:组合装;颜色分类:黄蛋壳【领券价9.9】')
